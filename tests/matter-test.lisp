; Use of this source code is governed by a BSD-style
; license that can be found in the license.txt file
; in the root directory of this project.

(in-package :motion)

(defclass matter-test (test-case)
  ())

(defmethod set-up ((test matter-test))
  (reset-test-matter))

(def-test-method test-motion ((test matter-test))
  (assert-vec-equal #(0.0 0.0) (s *matter-a*))
  (update-motion *matter-a* 2.0)
  (assert-vec-equal (vec2* *gravity* 4.0) (s *matter-a*))
  (assert-vec-equal (vec2* *gravity* 2.0) (v *matter-a*))
  (setf (a *matter-b*) (vec2* -1 *gravity*))
  (update-motion *matter-b* 10.0)
  (assert-vec-equal #(0.0 0.0) (s *matter-b*))
  (update-motion *matter-c* 10.0)
  (assert-vec-equal #(0.0 0.0) (s *matter-c*)))

(def-test-method test-point-collision-time ((test matter-test))
  (flet ((assert-time-result (s a-v b-v a-a b-a)
           (let ((time (point-collision-time s (- a-v b-v) (- a-a b-a))))
             (assert-equal (* (round (abs (- (+ (* a-v time)
                                                (/ (* a-a time time) 2))
                                             (+ (* b-v time)
                                                (/ (* b-a time time) 2))))
                                     0.001) 0.001)
                           (* (round (float s) 0.0001) 0.0001)))))
    (assert-equal 1.1735992 (point-collision-time 10 5 6))
    (assert-time-result 10 3 -2 3 -3)
    (assert-equal 2.0 (point-collision-time 10 5 0))
    (assert-equal 1.8257419 (point-collision-time 10 0 6))
    (assert-equal 0.0 (point-collision-time 0 5 6))
    (assert-equal :infinity (point-collision-time 10 0 0))
    (assert-equal :infinity (point-collision-time -10 0 0))
    (assert-equal -14.142136 (point-collision-time 10 0 -0.1))
    (assert-time-result 10 0 0 0 -0.1)
    (assert-time-result 10 0 0 -0.1 0)
    (assert-time-result 10 0 -0.1 0 -0.1)
    (assert-time-result 10 -0.1 0 0 -0.1)
    (assert-time-result 10 -0.1 0 0 -100)
    (assert-time-result 10 10.1 0 0 -0.1)
    (assert-equal 1.8257419 (point-collision-time 10 0 6))
    (assert-equal 1.055728 (point-collision-time -10 -10 1.0))
    (assert-equal 1.055728 (point-collision-time 10 10 -1.0))))

(def-test-method test-segment-collision-time ((test matter-test))
  (assert-vec-equal #(0.123105526 0.47213602)
                    (segment-collision-time #(1 2) #v(3 5) 8 2)))

(def-test-method test-aabb-collision-time ((test matter-test))
  (setf (v *matter-a*) #(-10.0 -10.0)
        (v *matter-b*) #(+10.0 +10.0))
  (assert-vec-equal #(15 25) (abs-point *poly-a* (car (aabb *poly-a*))))
  (assert-vec-equal #(80 60) (abs-point *poly-a* (cdr (aabb *poly-a*))))
  (assert-vec-equal #(-1.0 0.75) (aabb-collision-time *matter-a* *matter-b*)))
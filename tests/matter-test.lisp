; Use of this source code is governed by a BSD-style
; license that can be found in the license.txt file
; in the root directory of this project.

(in-package :motion)

(defclass matter-test (test-case)
  ())

(defmethod set-up ((test matter-test))
  (reset-test-matter))

(def-test-method test-motion ((test matter-test))
  (assert-vec-equal #(0.0 0.0) (s *matter-a*))
  (update-motion *matter-a* 2.0)
  (assert-vec-equal (vec2* *gravity* 4.0) (s *matter-a*))
  (assert-vec-equal (vec2* *gravity* 2.0) (v *matter-a*))
  (setf (a *matter-b*) (vec2* -1 *gravity*))
  (update-motion *matter-b* 10.0)
  (assert-vec-equal #(0.0 0.0) (s *matter-b*))
  (update-motion *matter-c* 10.0)
  (assert-vec-equal #(0.0 0.0) (s *matter-c*)))

(def-test-method test-point-collision-time ((test matter-test))
  (flet ((assert-time-result (s a-v b-v a-a b-a)
           (let ((time (point-collision-time s (- a-v b-v) (- a-a b-a))))
             (assert-equal (* (round (abs (- (+ (* a-v time)
                                                (/ (* a-a time time) 2))
                                             (+ (* b-v time)
                                                (/ (* b-a time time) 2))))
                                     0.001) 0.001)
                           (* (round (float s) 0.0001) 0.0001)))))
    (assert-equal 1.1735992 (point-collision-time 10 5 6))
    (assert-time-result 10 3 -2 3 -3)
    (assert-equal 2.0 (point-collision-time 10 5 0))
    (assert-equal 1.8257419 (point-collision-time 10 0 6))
    (assert-equal 0.0 (point-collision-time 0 5 6))
    (assert-equal :never (point-collision-time 10 0 0))
    (assert-equal :never (point-collision-time -10 0 0))
    (assert-equal -14.142136 (point-collision-time 10 0 -0.1))
    (assert-time-result 10 0 0 0 -0.1)
    (assert-time-result 10 0 0 -0.1 0)
    (assert-time-result 10 0 -0.1 0 -0.1)
    (assert-time-result 10 -0.1 0 0 -0.1)
    (assert-time-result 10 -0.1 0 0 -100)
    (assert-time-result 10 10.1 0 0 -0.1)
    (assert-equal 1.8257419 (point-collision-time 10 0 6))
    (assert-equal 1.055728 (point-collision-time -10 -10 1.0))
    (assert-equal 1.055728 (point-collision-time 10 10 -1.0))))

(def-test-method test-segment-collision-time ((test matter-test))
  (declare (notinline segment-collision-time))
  (flet ((assert-collision-time (s-a s-b v a prefix expect-a expect-b)
           (let ((vec (segment-collision-time s-a s-b v a)))
             (assert-equal expect-a (vec-a vec) (format nil "~a1" prefix))
             (assert-equal expect-b (vec-b vec) (format nil "~a2" prefix)))))
    (assert-collision-time #(3 5) #(10 12) 3 4 "A" 1.0 1.5)
    (assert-collision-time #(10 12) #(3 5) -3 -4 "B" 1.0 1.5)
    (assert-collision-time #(3 5) #(10 12) 0 0 "C" :never :never)
    (assert-collision-time #(10 12) #(3 5) 0 0 "D" :never :never)
    (assert-collision-time #(11 15) #(10 12) 0 0 "E" :never :now)
    (assert-collision-time #(10 12) #(9 15) 0 0 "F" :now :now)
    (assert-collision-time #(9 15) #(10 12) 0 0 "G" :now :now)))
  
(def-test-method test-aabb-collision-time ((test matter-test))
  (let ((vec (aabb-collision-time *matter-a* *matter-b*)))
    (assert-equal :never (vec-a vec) "A")
    (assert-equal :now (vec-b vec) "B"))
  (setf (x (presence *matter-a*)) 200
        (y (presence *matter-a*)) 300
        (v *matter-a*) #(-2 -3))
  (let ((vec (aabb-collision-time *matter-a* *matter-b*)))
    (assert-equal 85.0 (vec-a vec))
    (assert-equal 100.0 (vec-b vec))))
; Use of this source code is governed by a BSD-style
; license that can be found in the license.txt file
; in the root directory of this project.

(in-package :motion)

(defclass collision-time-test (test-case)
  ())

(def-test-method test-point-collision-time ((test collision-time-test))
  (flet ((assert-time-result (s a-v b-v a-a b-a)
           (let ((time (point-collision-time s (- a-v b-v) (- a-a b-a))))
             (assert-equal (* (round (abs (- (+ (* a-v time)
                                                (/ (* a-a time time) 2))
                                             (+ (* b-v time)
                                                (/ (* b-a time time) 2))))
                                     0.001) 0.001)
                           (* (round (float s) 0.0001) 0.0001)))))
    (assert-equal 1.1735992 (point-collision-time 10 5 6))
    (assert-time-result 10 3 -2 3 -3)
    (assert-equal 2.0 (point-collision-time 10 5 0))
    (assert-equal 1.8257419 (point-collision-time 10 0 6))
    (assert-equal 0.0 (point-collision-time 0 5 6))
    (assert-equal nil (point-collision-time 10 0 0))
    (assert-equal nil (point-collision-time -10 0 0))
    (assert-equal -14.142136 (point-collision-time 10 0 -0.1))
    (assert-time-result 10 0 0 0 -0.1)
    (assert-time-result 10 0 0 -0.1 0)
    (assert-time-result 10 0 -0.1 0 -0.1)
    (assert-time-result 10 -0.1 0 0 -0.1)
    (assert-time-result 10 -0.1 0 0 -100)
    (assert-time-result 10 10.1 0 0 -0.1)
    (assert-equal 1.8257419 (point-collision-time 10 0 6))
    (assert-equal 1.055728 (point-collision-time -10 -10 1.0))
    (assert-equal 1.055728 (point-collision-time 10 10 -1.0))))

(def-test-method test-segment-collision-time ((test collision-time-test))
  (declare (notinline segment-collision-time))
  (flet ((assert-collision-time (s-a s-b v a prefix expect-a expect-b)
           (let ((vec (segment-collision-time s-a s-b v a)))
             (assert-equal expect-a (vec-a vec) (format nil "~a1" prefix))
             (assert-equal expect-b (vec-b vec) (format nil "~a2" prefix)))))
    (assert-collision-time #(3 5) #(10 12) 3 4 "A" 1.0 1.5)
    (assert-collision-time #(10 12) #(3 5) -3 -4 "B" 1.0 1.5)
    (assert-collision-time #(3 5) #(10 12) 0 0 "C" nil t)
    (assert-collision-time #(10 12) #(3 5) 0 0 "D" nil t)
    (assert-collision-time #(11 15) #(10 12) 0 0 "E" t nil)
    (assert-collision-time #(10 12) #(11 15) 0 0 "F" t nil)
    (assert-collision-time #(10 12) #(9 15) 0 0 "G" t nil)
    (assert-collision-time #(9 15) #(10 12) 0 0 "H" t nil)))

(def-test-method test-collision-overlap ((test collision-time-test))
  (assert-vec-equal #(t nil) (collision-overlap #(t nil) #(1 2)))
  (assert-vec-equal #(t nil) (collision-overlap #(1 2) #(t nil)))
  (assert-vec-equal #(nil t) (collision-overlap #(nil t) #(nil t)))
  (assert-vec-equal #(t nil) (collision-overlap #(nil t) #(t nil)))
  (assert-vec-equal #(t nil) (collision-overlap #(t nil) #(nil t)))
  (assert-vec-equal #(nil t) (collision-overlap #(nil t) #(nil t)))
  (assert-vec-equal #(1 2) (collision-overlap #(1 10) #(-10 2)))
  (assert-vec-equal #(1 2) (collision-overlap #(-10 2) #(1 10))))

(def-test-method test-collision-possible-p ((test collision-time-test))
  (assert-true (collision-possible-p #(t nil)))
  (assert-true (collision-possible-p #(1.0 10.0)))
  (assert-true (collision-possible-p #(-1.0 10.0)))
  (assert-true (collision-possible-p #(1.0 1.0)))
  (assert-false (collision-possible-p #(nil t)))
  (assert-false (collision-possible-p #(10.0 1.0)))
  (assert-false (collision-possible-p #(-1.0 -2.0)))
  (assert-false (collision-possible-p #(-2.0 -1.0))))

(def-test-method test-collision< ((test collision-time-test))
  (declare (notinline collision<))
  (assert-false (collision< #(t nil) #(t nil)) "A")
  (assert-false (collision< #(nil t) #(nil t)) "B")
  (assert-true (collision< #(t nil) #(nil t)) "C")
  (assert-false (collision< #(nil t) #(t nil)) "D")
  (assert-true (collision< #(-10.0 1.0) #(t nil)) "E")
  (assert-false (collision< #(10.0 1.0) #(t nil)) "F")
  (assert-false (collision< #(t nil) #(-10.0 1.0)) "G")
  (assert-true (collision< #(t nil) #(10.0 1.0)) "H")
  (assert-false (collision< #(nil t) #(10.0 1.0)) "I")
  (assert-false (collision< #(nil t) #(-10.0 1.0)) "J")
  (assert-true (collision< #(10.0 1.0) #(nil t)) "K")
  (assert-true (collision< #(-10.0 1.0) #(nil t)) "L"))